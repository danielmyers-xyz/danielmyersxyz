[{"content":"I live in San Francisco’s Castro neighborhood and wanted a better way to keep an eye on what’s going on — potholes, graffiti, tree issues, and other service requests. Instead of waiting for monthly digests or digging through city dashboards, I built my own live map.\nThis was a chance to flex my GIS skills and stitch together an open-source stack I fully control — from ETL and spatial filtering to GeoServer and a React Leaflet frontend. Now I can check what’s happening in the neighborhood any time, from any device.\n🛠️ Project Overview The setup is split across two GitHub repos:\n📦 ETL Pipeline\nA Python notebook that fetches 311 data from SF’s Socrata API, filters it spatially to the Castro, and loads it into a PostGIS database. It’s automated using JupyterLab’s built-in Notebook Job scheduler — no cron, no external triggers.\n🌐 Frontend Dashboard\nA responsive web app built with React + Vite + React Leaflet. It fetches live GeoJSON from GeoServer’s WFS endpoint and displays it on an interactive map — hosted via GitHub Pages.\n⚙️ ETL Details The notebook does the following:\nExtract 311 data from the Socrata API Transform it using GeoPandas — buffer to 1 km from Castro Muni, reproject, clean Load into a PostGIS database using sqlalchemy and to_postgis() Publish as a WFS layer via GeoServer WFS endpoint:\nGetCapabilities\n🗺️ Frontend The dashboard loads live GeoJSON via fetch():\nconst url = \u0026#34;https://geoserver.danielmyers.xyz/geoserver/census/castro_311/ows?service=WFS\u0026amp;version=2.0.0\u0026amp;request=GetFeature\u0026amp;typeName=census:castro_311\u0026amp;outputFormat=application/json\u0026#34; fetch(url) .then(res =\u0026gt; res.json()) .then(data =\u0026gt; setGeoJsonData(data)); Data is rendered with React Leaflet and updated every time the page loads.\nTry it live: castro-311-dashboard\n🖱️ Interactivity The dashboard isn\u0026rsquo;t just a static map — it\u0026rsquo;s built for real-time exploration. Features include:\n✅ Live filter sync — Clicking a request type in the list filters the points on the map to only that category 💬 Interactive popups — Clicking any point reveals key info about the request, including type and open date 📱 Touch-friendly — Works well on mobile devices with tap interactions and stacked layout All points shown on the map represent currently open 311 service requests as of the most recent ETL run.\n🔗 Related Want to learn more about how I set up the infrastructure for this?\nRead my post: How I Built My Personal AWS GIS Stack\n💡 Takeaways ETL doesn’t have to be complicated — Jupyter + GeoPandas + PostGIS works great GeoServer is underrated for WFS publishing in custom stacks React Leaflet + GitHub Pages = a lightweight, full-featured map app Open data is way more useful when it\u0026rsquo;s cleaned and localized Built with 💙 in SF.\n","permalink":"http://localhost:1313/posts/castro-311/","summary":"\u003cp\u003eI live in San Francisco’s Castro neighborhood and wanted a better way to keep an eye on what’s going on — potholes, graffiti, tree issues, and other service requests.\nInstead of waiting for monthly digests or digging through city dashboards, I built my own live map.\u003c/p\u003e\n\u003cp\u003eThis was a chance to flex my GIS skills and stitch together an open-source stack I fully control —\nfrom ETL and spatial filtering to GeoServer and a React Leaflet frontend. Now I can check what’s happening in the neighborhood any time, from any device.\u003c/p\u003e","title":"A Daily-Updating 311 Dashboard for SF's Castro"},{"content":"Building a Personal GeoServer \u0026amp; PostGIS Stack I\u0026rsquo;ve worked with ArcGIS Online, ArcGIS Enterprise, and Microsoft SQL Server throughout my GIS career. I wanted a way to explore serving geospatial data using open-source tools and cloud infrastructure.\nThat led me to build a personal GeoServer and PostGIS stack. I wanted a mini-server setup I could tinker with, break, rebuild, and use for hobby projects without relying on enterprise software. Here’s how I built it.\nWhy GeoServer \u0026amp; PostGIS? GeoServer is the open-source counterpart to something like ArcGIS Server—it serves spatial data via standards like WFS and WMS, letting me host layers from my own database with full control. PostGIS, on the other hand, is the spatial extension for PostgreSQL and a powerful alternative to Microsoft SQL Server’s spatial capabilities. Together, they give me the kind of stack you\u0026rsquo;d expect from an enterprise GIS setup, but entirely open-source and self-hosted.\nMy Setup I chose AWS Lightsail because of its fixed monthly cost, which makes budgeting easier than with EC2. I went with the 4 GB RAM, 2 vCPU Ubuntu 22.04 LTS instance (80 GB SSD) to keep costs low, even though I\u0026rsquo;d prefer the 8 GB tier.\nDockerized Stack:\nGeoServer and PostGIS run in Docker containers (using official Docker images) and are orchestrated via a simple docker-compose.yml, ensuring easy deployment, consistent environments, and persistent data volumes. Connecting the Dots To simplify and secure remote access, I configured a Cloudflare Tunnel paired with their free DNS service. This let me route traffic through a stable URL without needing to open ports on my server or worry about dynamic IPs. It\u0026rsquo;s secure, low‑maintenance, and perfect for a side project like this.\nWhat\u0026rsquo;s Next? My plans include:\nBuilding dashboards (stay tuned for another blog post!) Playing around with spatial data for San Francisco neighborhoods Experimenting more with styling and theming This setup is practical and it gives me the freedom to experiment with an enterprise‑style GIS stack on my own terms, without license constraints or vendor lock‑in. And because it’s all open‑source, I can dig into every layer, customize everything, and actually understand how the whole thing works under the hood.\n","permalink":"http://localhost:1313/posts/aws-gis-stack/","summary":"\u003ch2 id=\"building-a-personal-geoserver--postgis-stack\"\u003eBuilding a Personal GeoServer \u0026amp; PostGIS Stack\u003c/h2\u003e\n\u003cp\u003eI\u0026rsquo;ve worked with ArcGIS Online, ArcGIS Enterprise, and Microsoft SQL Server throughout my GIS career. I wanted a way to explore serving geospatial data using open-source tools and cloud infrastructure.\u003c/p\u003e\n\u003cp\u003eThat led me to build a personal GeoServer and PostGIS stack. I wanted a mini-server setup I could tinker with, break, rebuild, and use for hobby projects without relying on enterprise software. Here’s how I built it.\u003c/p\u003e","title":"Building a Personal GeoServer \u0026 PostGIS Stack"},{"content":"Building a Zoning Chatbot with GeoPandas, Folium, and the OpenAI API I wanted to create a proof-of-concept chatbot that could answer basic zoning questions using spatial data. The idea was simple: enter an address, and get back a zoning summary with a map. I used a combination of Python tools I already lean on—GeoPandas, Folium, and the OpenAI API—and wired them up into a notebook that does just that.\n🧠 The chatbot takes in an address, geocodes it with Nominatim, runs a spatial join with a zoning geojson (in this case, for Marin County), and then sends the resulting zoning description to the OpenAI API for summarization. It returns both the original zoning text and a cleaned-up explanation in plain English. I also generate an interactive map with Folium showing the parcel boundary and surrounding zoning.\nOne of my main goals here was accessibility—I wanted a zoning lookup tool that produces output that\u0026rsquo;s easy to read aloud by a screen reader or text-to-speech tool. A lot of existing GIS interfaces aren\u0026rsquo;t optimized for accessibility or non-technical users. This approach keeps the logic spatial but outputs something lightweight, plain-text, and structured for assistive tech.\n🔧 Tech Stack GeoPandas for spatial joins Folium for web map generation geopy + Nominatim for geocoding openai Python library for GPT-based summarization A zoning geojson of Unincorporated Marin County from Open Data 📂 Files \u0026amp; Structure This notebook defines four core functions:\nlookup_zoning(address): Geocodes the input address, converts it to a GeoDataFrame, reprojects to match the zoning data, and performs a spatial join to find the intersecting zoning polygon. summarize_zoning(zone_gdf): Extracts zoning attributes from the joined polygon, builds a prompt, and sends it to the OpenAI API for summarization. show_result_map(point_geom, result_gdf): Uses Folium to visualize the point and intersecting zoning polygon. zoning_chatbot(address): High-level wrapper function that ties everything together, prints the zoning attributes, gets the summary, and shows the map. 🗺️ Try it yourself You can view the notebook on GitHub or interact with the embedded version below:\n🔗 View the repository on GitHub\n","permalink":"http://localhost:1313/posts/chatbot/","summary":"\u003ch2 id=\"building-a-zoning-chatbot-with-geopandas-folium-and-the-openai-api\"\u003eBuilding a Zoning Chatbot with GeoPandas, Folium, and the OpenAI API\u003c/h2\u003e\n\u003cp\u003eI wanted to create a proof-of-concept chatbot that could answer basic zoning questions using spatial data. The idea was simple: enter an address, and get back a zoning summary with a map. I used a combination of Python tools I already lean on—GeoPandas, Folium, and the OpenAI API—and wired them up into a notebook that does just that.\u003c/p\u003e\n\u003cp\u003e🧠 The chatbot takes in an address, geocodes it with Nominatim, runs a spatial join with a zoning geojson (in this case, for Marin County), and then sends the resulting zoning description to the OpenAI API for summarization. It returns both the original zoning text and a cleaned-up explanation in plain English. I also generate an interactive map with Folium showing the parcel boundary and surrounding zoning.\u003c/p\u003e","title":"ChatGPT Zoning Chatbot"},{"content":"🛠️ Zoning Lookup Tool — Technical Breakdown\nThis application is a browser-based GIS tool built using the ArcGIS API for JavaScript (v4.27), designed to help users search and interactively query zoning information for Marin County, CA.\n🔧 Features and Architecture Framework: The app is written in plain JavaScript and styled with custom CSS and the ArcGIS dark theme. Map Initialization: Uses a MapView with a default zoom centered on Marin County. A custom extent is defined for a consistent viewport. Search Integration: The Esri Search widget enables address and Parcel ID lookups, which trigger FeatureLayer intersections. Layer Queries: Parcel, zoning, and general plan layers are all hosted in ArcGIS Online and queried dynamically using spatial intersects relationships. Intersection Logic: A unified query checks all layers and extracts the smallest relevant feature to reduce ambiguity. UI Rendering: Results are displayed in a sidebar panel. The view automatically zooms to the selected parcel or clicked feature. Performance Optimization: Layers are hidden by default and only displayed at appropriate zoom levels based on view.scale watchers. 📦 Tech Stack ArcGIS API for JavaScript (CDN) Static HTML/CSS/JS, deployed on GitHub Pages Hosted ArcGIS Online feature layers Fully client-side, no server-side code 🖼️ Architecture Diagram 🔗 Open in a new tab for full responsiveness\nSource code available on GitHub.\n","permalink":"http://localhost:1313/posts/post-1/","summary":"\u003cp\u003e🛠️ \u003cstrong\u003eZoning Lookup Tool — Technical Breakdown\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThis application is a browser-based GIS tool built using the ArcGIS API for JavaScript (v4.27), designed to help users search and interactively query zoning information for Marin County, CA.\u003c/p\u003e\n\u003ch3 id=\"-features-and-architecture\"\u003e🔧 Features and Architecture\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFramework\u003c/strong\u003e: The app is written in plain JavaScript and styled with custom CSS and the ArcGIS dark theme.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMap Initialization\u003c/strong\u003e: Uses a \u003ccode\u003eMapView\u003c/code\u003e with a default zoom centered on Marin County. A custom extent is defined for a consistent viewport.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSearch Integration\u003c/strong\u003e: The Esri \u003ccode\u003eSearch\u003c/code\u003e widget enables address and Parcel ID lookups, which trigger \u003ccode\u003eFeatureLayer\u003c/code\u003e intersections.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLayer Queries\u003c/strong\u003e: Parcel, zoning, and general plan layers are all hosted in ArcGIS Online and queried dynamically using spatial \u003ccode\u003eintersects\u003c/code\u003e relationships.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIntersection Logic\u003c/strong\u003e: A unified query checks all layers and extracts the smallest relevant feature to reduce ambiguity.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUI Rendering\u003c/strong\u003e: Results are displayed in a sidebar panel. The view automatically zooms to the selected parcel or clicked feature.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePerformance Optimization\u003c/strong\u003e: Layers are hidden by default and only displayed at appropriate zoom levels based on \u003ccode\u003eview.scale\u003c/code\u003e watchers.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-tech-stack\"\u003e📦 Tech Stack\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eArcGIS API for JavaScript (CDN)\u003c/li\u003e\n\u003cli\u003eStatic HTML/CSS/JS, deployed on GitHub Pages\u003c/li\u003e\n\u003cli\u003eHosted ArcGIS Online feature layers\u003c/li\u003e\n\u003cli\u003eFully client-side, no server-side code\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-architecture-diagram\"\u003e🖼️ Architecture Diagram\u003c/h3\u003e\n\u003cp align=\"center\"\u003e\n  \u003cimg src=\"/images/lookup-diagram.png\" width=\"700\" alt=\"Zoning App Architecture Diagram\"\u003e\n\u003c/p\u003e","title":"Zoning Lookup Tool"},{"content":"Daniel J. Myers is a GIS and data professional specializing in workflow automation with Python, enhancing field mapping through advanced mobile data collection tools, and implementing open-source solutions to reduce costs and improve operational efficiency.\n🌲 County of Marin NOVEMBER 2022 – PRESENT\nDepartment of Information Services and Technology, Data Team\nGIS Engineer Deployed and maintain a Jupyter Notebook server configured with Python and ArcPy, integrated with Git for version control, and optimized for scheduled script execution—saving the county $8,000 annually by leveraging open-source tools. Manage the development and maintenance of the County’s ArcGIS Open Data Hub, streamlining access to public geospatial datasets. Automate updates to over 100 ArcGIS Online feature layers using Python in Jupyter Notebooks, replacing legacy map image services with hosted feature services. Designed and deployed ArcGIS Experience Builder applications to deliver interactive zoning and General Plan tools. Built ArcGIS Survey123 and Field Maps applications to digitize inspection workflows, eliminating paper forms and saving dozens of hours in manual data entry. These tools enable dashboarding and reporting through Experience Builder and Operations Dashboards. 🏙️ City of Boston FEBRUARY 2019 – NOVEMBER 2022\nGIS Architect APRIL 2022 – NOVEMBER 2022\nDepartment of Innovation and Technology, Analytics Team\nLed deployment of ArcGIS Enterprise, including installation, configuration, and administration of base components and add-ons. Developed automated workflows using ArcPy and ArcGIS Notebooks to update and maintain databases, geocoders, maps, and portal administration tasks. Senior Analyst OCTOBER 2021 – MAY 2022\nDepartment of Innovation and Technology, Analytics Team\nServed as lead analyst on the Analytics Team, collaborating with data engineers, performance managers, and fellow analysts to create maps, applications, and tools supporting city operations. Built the City of Boston’s COVID-19 Vaccine Map as part of the city’s pandemic response. Created a Food Insecurity Index combining census variables and internal datasets to guide resource allocation for the Office of Food Justice. GIS Analyst FEBRUARY 2019 – OCTOBER 2021\nOffice of Emergency Management, Situation Unit\nLed the Situation Unit during emergency operations center activations for large-scale events such as major sports parades, the Boston Marathon, and extreme weather. Collected, analyzed, and disseminated operational data to support incident command decision-making, using WebEOC and ArcGIS tools—including Survey123, Web Apps, and Operational Dashboards integrated with 911 (CAD), 311, flood sensors, and live weather feeds. Served as project manager for a Homeland Security remote sensing initiative, coordinating monthly with nine regional GIS managers to procure imagery, LiDAR, and 3D data. Mentored in the 2020 Google Summer of Code, guiding the development of a Python tool to analyze city parcels for potential temporary shelter sites in support of FEMA’s Regional Catastrophic Preparedness grant. 🧭 University of Massachusetts Amherst APRIL 2018 – JANUARY 2019\nGIS Specialist Facilities \u0026amp; Grounds Management\nContributed to the development of a geospatial asset management system for the main UMass campus and satellite locations. Designed spatial databases and published ArcGIS Online hosted feature services for indoor and outdoor campus assets. Collected thousands of outdoor asset locations using Trimble R10, ArcGIS Collector, and Survey123. Operated DJI Phantom 4 Pro drone to collect aerial imagery for use in construction monitoring and planning. Generated orthomosaics using OpenDroneMap and georeferenced outputs for GIS integration and analysis. 🌎 University of Massachusetts Transportation Center JULY 2018 – FEBRUARY 2019\nUAS Pilot UMass Air\nOperated DJI Matrice 600 equipped with near-infrared, thermal, and RGB cameras as the Remote Pilot in Command for EPA-funded research. Assembled and purchased custom computer and aerial vehicle hardware. Planned pre-flight logistics, contacted air traffic officials, and performed hexacopter maintenance and ground control operations. Managed data processing and storage for equipment valued in excess of $100,000. 🧰 Skills \u0026amp; Tools Python (Pandas, GeoPandas, ArcPy) SQL (PostgreSQL/PostGIS, MySQL, SQLite, Microsoft SQL Server) ArcGIS Pro, ArcGIS Enterprise, ArcGIS Online ArcGIS Experience Builder, Operation Dashboards Remote Sensing, Sensors, and UAS (Drone) Operations GNSS/GPS Data Capture (Trimble, Field Maps, Survey123) Server Administration \u0026amp; Automation (Ubuntu, Docker, Systemd, Cloudflare) 🏆 Awards UMass Amherst Geosciences Distinguished Alumni, 2024 ESRI UC Plenary, 2020 — Metro Boston COVID-19 Dashboards ESRI Fed UC Plenary, 2019 — Daily Traffic Operations Dashboard 🎓 Education San Francisco City College\nDatabases for Developers with Python \u0026amp; SQL Certificate of Achievement University of Massachusetts, Amherst\nMSc, Geographic Information Systems \u0026amp; Technology Joseph Hartshorn Memorial Scholarship UMass Air sUAS Research Fellow B.A., Political Science President, Pi Sigma Alpha (Delta Lambda Chapter) Certificate in Public Policy \u0026amp; Administration 🧪 Certifications \u0026amp; Licenses FAA Part 107 UAS License Harvard National Preparedness Leadership Initiative, January 2020 ESRI: Image Analysis, LiDAR Management, Python for Geoprocessing, Enterprise Administration, Telling Stories with GIS Maps, Basics of JavaScript Web Apps 📝 Publications \u0026ldquo;Developing a Land Cover Classification of Salt Marshes Using UAS Time-Series Imagery and an Open-Source Workflow\u0026rdquo;\nMyers, D.J., et al. (2018) Int. Arch. Photogramm. Remote Sens. Spatial Inf. Sci., XLII-4/W8, 155–162.\n🎤 Presentations COVID-19 GIS for Metro Boston Homeland Security Region — NEArc 2020 Tree Inventorying at The Waugh Arboretum — NEArc 2018 Salt Marsh Land Cover Classification with UAS \u0026amp; Open Source — FOSS4G 2018 (Tanzania) UMassAir: Scientific Applications in Unmanned Aerial Systems — SES Showcase Climate Leadership Summit, Amherst MA ","permalink":"http://localhost:1313/history/work/","summary":"\u003cp\u003eDaniel J. Myers is a GIS and data professional specializing in workflow automation with Python, enhancing field mapping through advanced mobile data collection tools, and implementing open-source solutions to reduce costs and improve operational efficiency.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-county-of-marin\"\u003e🌲 County of Marin\u003c/h2\u003e\n\u003cp\u003eNOVEMBER 2022 – PRESENT\u003cbr\u003e\nDepartment of Information Services and Technology, Data Team\u003c/p\u003e\n\u003ch3 id=\"gis-engineer\"\u003eGIS Engineer\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDeployed and maintain a Jupyter Notebook server configured with Python and ArcPy, integrated with Git for version control, and optimized for scheduled script execution—saving the county $8,000 annually by leveraging open-source tools.\u003c/li\u003e\n\u003cli\u003eManage the development and maintenance of the County’s ArcGIS Open Data Hub, streamlining access to public geospatial datasets.\u003c/li\u003e\n\u003cli\u003eAutomate updates to over 100 ArcGIS Online feature layers using Python in Jupyter Notebooks, replacing legacy map image services with hosted feature services.\u003c/li\u003e\n\u003cli\u003eDesigned and deployed ArcGIS Experience Builder applications to deliver interactive zoning and General Plan tools.\u003c/li\u003e\n\u003cli\u003eBuilt ArcGIS Survey123 and Field Maps applications to digitize inspection workflows, eliminating paper forms and saving dozens of hours in manual data entry. These tools enable dashboarding and reporting through Experience Builder and Operations Dashboards.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-city-of-boston\"\u003e🏙️ City of Boston\u003c/h2\u003e\n\u003cp\u003eFEBRUARY 2019 – NOVEMBER 2022\u003c/p\u003e","title":"Work History"}]